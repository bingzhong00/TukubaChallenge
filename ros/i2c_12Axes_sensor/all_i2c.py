#!/usr/bin/env python
# -*- coding: utf-8 -*-
# i2c動作テスト 2個の加速度センサ、デジタルコンパス、ジャイロセンサーのデータをそれぞれ取得、表示する
import smbus		#i2cライブラリ
import RPi.GPIO as GPIO
import time
#-------------------------------------------------------
#ADXL345(加速度センサ)　定義
#-------------------------------------------------------
ADXL345_adr1 = 0x1D		#デバイス1のi2cアドレス
ADXL345_adr2 = 0x53		#デバイス2のi2cアドレス
ADXL345_x_reg_adr = 0x32	#X軸レジスタのアドレス
ADXL345_y_reg_adr = 0x34	#Y軸レジスタのアドレス
ADXL345_z_reg_adr = 0x36	#Z軸レジスタのアドレス

#-------------------------------------------------------
#HMC5883L(デジタルコンパス)　定義
#-------------------------------------------------------
HMC5883L_adr = 0x1E				#デバイスのi2cアドレス
HMC5883L_configration_reg_adr = 0x00		#コンフィグレーションレジスタ１のアドレス
HMC5883L_mode_reg_adr = 0x02			#モードレジスタのアドレス
HMC5883L_status_reg_adr = 0x09			#ステータスレジスタのアドレス
HMC5883L_x_reg_adr = 0x03			#X軸レジスタのアドレス
HMC5883L_y_reg_adr = 0x07			#Y軸レジスタのアドレス
HMC5883L_z_reg_adr = 0x05			#Z軸レジスタのアドレス

#-------------------------------------------------------
#L3GD20(ジャイロセンサー)　定義
#-------------------------------------------------------
L3GD20_adr = 0x6b		#デバイスのi2cアドレス
L3GD20_ctrl_reg1_adr = 0x20	#コントロールレジスタのアドレス
L3GD20_x_reg_adr = 0x28		#X軸レジスタのアドレス
L3GD20_y_reg_adr = 0x2A		#Y軸レジスタのアドレス
L3GD20_z_reg_adr = 0x2C		#Z軸レジスタのアドレス

#-------------------------------------------------------
# インスタンス実体化
#-------------------------------------------------------
bus = smbus.SMBus(1)	#i2cインスタンス実体化

#-------------------------------------------------------
# ADXL345(加速度センサ)関連機能
#-------------------------------------------------------
#-------------------------------------------------------
# 初期化
#-------------------------------------------------------
def init_ADXL345():
	bus.write_byte_data(ADXL345_adr1,0x2D,0x08)	#デバイス1を計測モードに移行
	bus.write_byte_data(ADXL345_adr2,0x2D,0x08)	#デバイス2を計測モードに移行

#-------------------------------------------------------
# センサ値取得
# address:i2cアドレス
# adr:レジスタのアドレス
#-------------------------------------------------------
def get_ADXL345(address,adr):
	acc0 = bus.read_byte_data(address,adr)
	acc1 = bus.read_byte_data(address,adr+1)
	acc = (acc1 << 8) + acc0
	if acc > 0x1FF:
		acc = (65536 - acc) * -1
	acc = acc * 3.9 / 1000
	return acc

#-------------------------------------------------------
# センサ値表示
#-------------------------------------------------------
def print_ADXL345():
	x_acc = get_ADXL345(ADXL345_adr1,ADXL345_x_reg_adr)
	y_acc = get_ADXL345(ADXL345_adr1,ADXL345_y_reg_adr)
	z_acc = get_ADXL345(ADXL345_adr1,ADXL345_z_reg_adr)
	print '加速度センサ1 X=%2.2f' % x_acc,'[g],Y = %2.2f' % y_acc, '[g], Z = %2.2f' % z_acc, '[g]'
	x_acc = get_ADXL345(ADXL345_adr2,ADXL345_x_reg_adr)
	y_acc = get_ADXL345(ADXL345_adr2,ADXL345_y_reg_adr)
	z_acc = get_ADXL345(ADXL345_adr2,ADXL345_z_reg_adr)
	print '加速度センサ2 X=%2.2f' % x_acc,'[g],Y = %2.2f' % y_acc, '[g], Z = %2.2f' % z_acc, '[g]'
#-------------------------------------------------------
#-------------------------------------------------------
# HMC5883L(デジタルコンパス)関連機能
#-------------------------------------------------------
#-------------------------------------------------------
# 初期化
#-------------------------------------------------------
def init_HMC5883L():
	#デバイスとの接続確認 コンフィグレーションレジスタ１(アドレス0x00)の0x10を受信できればOK
	who = bus.read_byte_data(HMC5883L_adr,HMC5883L_configration_reg_adr)
	#連続計測モード
	bus.write_byte_data(HMC5883L_adr,HMC5883L_mode_reg_adr,0x00)	

#-------------------------------------------------------
# デジタルコンパス値取得
# adr:レジスタのアドレス
#-------------------------------------------------------
def get_HMC5883L(adr):
	acc_m = bus.read_byte_data(HMC5883L_adr,adr)
	acc_l = bus.read_byte_data(HMC5883L_adr,adr+1)
	acc = (acc_m << 8) + acc_l
	return acc

#-------------------------------------------------------
# デジタルコンパス値表示
#-------------------------------------------------------
def print_HMC5883L():
	status = bus.read_byte_data(HMC5883L_adr,HMC5883L_status_reg_adr)
	if status & 0x01 == 1:		
		x_acc = get_HMC5883L(HMC5883L_x_reg_adr)
		y_acc = get_HMC5883L(HMC5883L_y_reg_adr)
		z_acc = get_HMC5883L(HMC5883L_z_reg_adr)
		print 'デジタルコンパス X=%f' % x_acc,',Y = %f' % y_acc, ', Z = %f' % z_acc
#-------------------------------------------------------

#-------------------------------------------------------
# L3GD20(ジャイロセンサー)関連機能
#-------------------------------------------------------
#-------------------------------------------------------
# 初期化
#-------------------------------------------------------
def init_L3GD20():
	#デバイスとの接続確認 0xD4を受信できればOK
	who = bus.read_byte_data(L3GD20_adr,0x0F)
	#print 'WHO_AM_I_=%x' % who

	#X,Y,Z軸enable
	bus.write_byte_data(L3GD20_adr,L3GD20_ctrl_reg1_adr,0x0F)	

#-------------------------------------------------------
# センサ値取得
# adr:レジスタのアドレス
#-------------------------------------------------------
def get_L3GD20(adr):
	acc0 = bus.read_byte_data(L3GD20_adr,adr)
	acc1 = bus.read_byte_data(L3GD20_adr,adr+1)
	acc = (acc1 << 8) + acc0
	if acc > 0x7FFF:
		acc = ((65536 - acc) + 1) * -1
	acc = acc * 0.00875 # CTRL_REG4 ,FS1 = 0,FS0=0の時の分解能
	return acc

#-------------------------------------------------------
# センサ値表示
#-------------------------------------------------------
def print_L3GD20():
	x_acc = get_L3GD20(L3GD20_x_reg_adr)
	y_acc = get_L3GD20(L3GD20_y_reg_adr)
	z_acc = get_L3GD20(L3GD20_z_reg_adr)
	print 'ジャイロセンサー X=%3.4f' % x_acc,'[dps],Y = %3.4f' % y_acc, '[dps], Z = %3.4f' % z_acc, '[dps]'

#-------------------------------------------------------
# メイン処理
#-------------------------------------------------------
def main():

	#各センサ初期化
	init_ADXL345()
	init_HMC5883L()
	init_L3GD20()

	while 1:
		#各センサ値表示
		print_ADXL345()
		print_HMC5883L()	
		print_L3GD20()
		time.sleep(0.5)               # 0.5秒待機		

        GPIO.cleanup()                      # GPIOピンの設定解除

if __name__ == "__main__":
    main()



