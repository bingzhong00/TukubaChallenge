<?xml version="1.0"?>

<launch>
  <param name="pub_map_odom_transform" value="true"/> 
  <param name="map_frame" value="map"/> 
  <param name="base_frame" value="base_frame"/> 
  <param name="odom_frame" value="odom"/>

  <arg name="scan_topic" default="/base_scan" />


  <!-- tf -->
<!--
  <node pkg="tf" type="static_transform_publisher" name="map_2_odom" args="0 0 0 0 0 0 /map /odom 100"/>
  <node pkg="tf" type="static_transform_publisher" name="base_footprint_2_base_link" args="0 0 0 0 0 0 /odom /base_link 100"/> 
-->
  <node pkg="tf" type="static_transform_publisher" name="base_link_2_base_stabilized_link" args="0 0 0 0 0 0 /base_link /base_stabilized 100"/> 
  <node pkg="tf" type="static_transform_publisher" name="base_stablized_2_base_frame" args="0 0 0 0 0 0 /base_stabilized /base_frame 100"/> 
  <node pkg="tf" type="static_transform_publisher" name="base_frame_2_laser_link" args="0 0 0 0 0 3.1415 /base_frame /laser 100"/> 
  <node pkg="tf" type="static_transform_publisher" name="base_frame_2_laser_rear_link" args="-1.05 0 0 3.1415 0 0 /base_frame /laser_rear 100"/> 
  <node pkg="tf" type="static_transform_publisher" name="base_frame_2_laser_marged_link" args="-0.5 0 0 0 0 0 /laser /merged_lrf 100"/>
  <node pkg="tf" type="static_transform_publisher" name="base_2_nav_link" args="0 0 0 0 0 0 /base_frame /nav 100"/>


  <!-- LRF(urg) -->
  <node pkg="urg_node" type="urg_node" name="urg_node" args="/last:=/base_scan">
    <param name="ip_address" value="192.168.1.10"/>
  </node>
  <node pkg="urg_node" type="urg_node" name="urg_node_rear" args="/last:=/base_scan2">
    <param name="ip_address" value="192.168.1.11"/>
    <param name="frame_id" value="laser_rear"/>
  </node>

  <!-- LRF(urg) for default frameid -->
  <!-- <node pkg="rosif" type="urg_reverse.py" name="urg_reverse"/> -->

  <!-- ekf_localization -->
<!--
  <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization">
    <rosparam command="load" file="$(find amcl_example)/launch/localization.yaml" />
  </node>
-->

  <!-- RotaryEncorder to odom -->
  <node pkg="benz_navigation" type="wheel_odometry_benz.py" name="wheel_odometry_benz"/>

  <node pkg="gmapping" type="slam_gmapping" name="slam_gmapping">
    <rosparam>
      odom_frame: odom
      base_frame: base_link
      map_frame: map

      map_update_interval: 0.5 # Publish new map

      maxUrange: 25.5 # Should be just less than sensor range
      maxRange: 26.1 # Should be just greater than sensor range
      particles: 100 # Increased from 80

      # Update frequencies
      linearUpdate: 0.3
      angularUpdate: 0.5
      temporalUpdate: 2.0
      resampleThreshold: 0.5

      # Initial Map Size
      xmin: -125.0
      ymin: -125.0
      xmax: 125.0
      ymax: 125.0
      delta: 0.05

      # All default
      sigma: 0.05
      kernelSize: 1
      lstep: 0.05
      astep: 0.05
      iterations: 5
      lsigma: 0.075
      ogain: 3.0
      lskip: 0
      llsamplerange: 0.01
      llsamplestep: 0.01
      lasamplerange: 0.005
      lasamplestep: 0.005

    </rosparam>
    <remap from="scan" to="$(arg scan_topic)"/>
  </node>


</launch>
