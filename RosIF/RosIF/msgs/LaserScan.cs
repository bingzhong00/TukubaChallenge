//----------------------------------------------------------------
// <auto-generated>
//     This code was generated by the GenMsg. Version: 0.1.0.0
//     Don't change it manually.
//     2016-08-07T13:09:39+09:00
// </auto-generated>
//----------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using RosSharp.Message;
using RosSharp.Service;
using RosSharp.std_msgs;
namespace RosSharp.sensor_msgs
{
    ///<exclude/>
    public class LaserScan : IMessage
    {
        ///<exclude/>
        public LaserScan()
        {
            header = new Header();
            ranges = new List<float>();
            intensities = new List<float>();
        }
        ///<exclude/>
        public LaserScan(BinaryReader br)
        {
            Deserialize(br);
        }
        ///<exclude/>
        public Header header { get; set; }
        ///<exclude/>
        public float angle_min { get; set; }
        ///<exclude/>
        public float angle_max { get; set; }
        ///<exclude/>
        public float angle_increment { get; set; }
        ///<exclude/>
        public float time_increment { get; set; }
        ///<exclude/>
        public float scan_time { get; set; }
        ///<exclude/>
        public float range_min { get; set; }
        ///<exclude/>
        public float range_max { get; set; }
        ///<exclude/>
        public List<float> ranges { get; set; }
        ///<exclude/>
        public List<float> intensities { get; set; }
        ///<exclude/>
        public string MessageType
        {
            get { return "sensor_msgs/LaserScan"; }
        }
        ///<exclude/>
        public string Md5Sum
        {
            get { return "90c7ef2dc6895d81024acba2ac42f369"; }
        }
        ///<exclude/>
        public string MessageDefinition
        {
            get { return "Header header\nfloat32 angle_min\nfloat32 angle_max\nfloat32 angle_increment\nfloat32 time_increment\nfloat32 scan_time\nfloat32 range_min\nfloat32 range_max\nfloat32[] ranges\nfloat32[] intensities"; }
        }
        ///<exclude/>
        public bool HasHeader
        {
            get { return true; }
        }
        ///<exclude/>
        public void Serialize(BinaryWriter bw)
        {
            header.Serialize(bw);
            bw.Write(angle_min);
            bw.Write(angle_max);
            bw.Write(angle_increment);
            bw.Write(time_increment);
            bw.Write(scan_time);
            bw.Write(range_min);
            bw.Write(range_max);
            bw.Write(ranges.Count); for(int i=0; i<ranges.Count; i++) { bw.Write(ranges[i]);}
            bw.Write(intensities.Count); for(int i=0; i<intensities.Count; i++) { bw.Write(intensities[i]);}
        }
        ///<exclude/>
        public void Deserialize(BinaryReader br)
        {
            header = new Header(br);
            angle_min = br.ReadSingle();
            angle_max = br.ReadSingle();
            angle_increment = br.ReadSingle();
            time_increment = br.ReadSingle();
            scan_time = br.ReadSingle();
            range_min = br.ReadSingle();
            range_max = br.ReadSingle();
            ranges = new List<float>(br.ReadInt32()); for(int i=0; i<ranges.Capacity; i++) { var x = br.ReadSingle();ranges.Add(x);}
            intensities = new List<float>(br.ReadInt32()); for(int i=0; i<intensities.Capacity; i++) { var x = br.ReadSingle();intensities.Add(x);}
        }
        ///<exclude/>
        public int SerializeLength
        {
            get { return header.SerializeLength + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + ranges.Sum(x => 4) + 4 + intensities.Sum(x => 4); }
        }
        ///<exclude/>
        public bool Equals(LaserScan other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            return other.header.Equals(header) && other.angle_min.Equals(angle_min) && other.angle_max.Equals(angle_max) && other.angle_increment.Equals(angle_increment) && other.time_increment.Equals(time_increment) && other.scan_time.Equals(scan_time) && other.range_min.Equals(range_min) && other.range_max.Equals(range_max) && other.ranges.SequenceEqual(ranges) && other.intensities.SequenceEqual(intensities);
        }
        ///<exclude/>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != typeof(LaserScan)) return false;
            return Equals((LaserScan)obj);
        }
        ///<exclude/>
        public override int GetHashCode()
        {
            unchecked
            {
                int result = 0;
                result = (result * 397) ^ header.GetHashCode();
                result = (result * 397) ^ angle_min.GetHashCode();
                result = (result * 397) ^ angle_max.GetHashCode();
                result = (result * 397) ^ angle_increment.GetHashCode();
                result = (result * 397) ^ time_increment.GetHashCode();
                result = (result * 397) ^ scan_time.GetHashCode();
                result = (result * 397) ^ range_min.GetHashCode();
                result = (result * 397) ^ range_max.GetHashCode();
                result = (result * 397) ^ ranges.GetHashCode();
                result = (result * 397) ^ intensities.GetHashCode();
                return result;
            }
        }
    }
}
