//----------------------------------------------------------------
// <auto-generated>
//     This code was generated by the GenMsg. Version: 0.1.0.0
//     Don't change it manually.
//     2016-08-07T13:22:54+09:00
// </auto-generated>
//----------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using RosSharp.Message;
using RosSharp.Service;
using RosSharp.std_msgs;
using RosSharp.geometry_msgs;

namespace RosSharp.tf
{
    ///<exclude/>
    public class tfMessage : IMessage
    {
        ///<exclude/>
        public tfMessage()
        {
            transforms = new List<TransformStamped>();
        }
        ///<exclude/>
        public tfMessage(BinaryReader br)
        {
            Deserialize(br);
        }
        ///<exclude/>
        public List<TransformStamped> transforms { get; set; }
        ///<exclude/>
        public string MessageType
        {
            get { return "tf/tfMessage"; }
        }
        ///<exclude/>
        public string Md5Sum
        {
            get { return "94810edda583a504dfda3829e70d7eec"; }
        }
        ///<exclude/>
        public string MessageDefinition
        {
            get { return "TransformStamped[] transforms"; }
        }
        ///<exclude/>
        public bool HasHeader
        {
            get { return false; }
        }
        ///<exclude/>
        public void Serialize(BinaryWriter bw)
        {
            bw.Write(transforms.Count); for(int i=0; i<transforms.Count; i++) { transforms[i].Serialize(bw);}
        }
        ///<exclude/>
        public void Deserialize(BinaryReader br)
        {
            transforms = new List<TransformStamped>(br.ReadInt32()); for(int i=0; i<transforms.Capacity; i++) { var x = new TransformStamped(br);transforms.Add(x);}
        }
        ///<exclude/>
        public int SerializeLength
        {
            get { return 4 + transforms.Sum(x => x.SerializeLength); }
        }
        ///<exclude/>
        public bool Equals(tfMessage other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            return other.transforms.SequenceEqual(transforms);
        }
        ///<exclude/>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != typeof(tfMessage)) return false;
            return Equals((tfMessage)obj);
        }
        ///<exclude/>
        public override int GetHashCode()
        {
            unchecked
            {
                int result = 0;
                result = (result * 397) ^ transforms.GetHashCode();
                return result;
            }
        }
    }
}
